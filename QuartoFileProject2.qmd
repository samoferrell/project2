---
title: "QuartoFileProject2"
format: html
editor: visual
---

## Information about the API

Link: https://www.tvmaze.com/api This API gives us information about famous TV Shows. Our endpoints are /shows/id/cast,episodes,images,crew,seasons

Row Manipulations: All - rating_average episodes - rating cast - person_gender seasons\_

## Function Writing:

```{r}
library(jsonlite)
search_show <- function(url = "https://api.tvmaze.com/shows", show_name = NULL, endpoint = NULL){
  id_info <- httr::GET(url)
  parsed <- fromJSON(rawToChar(id_info$content))
  all_shows <- tibble::as_tibble(parsed)
    if (!is.null(show_name) | (!is.null(endpoint))){
    subsetted <- subset(all_shows, name == show_name)
    id <- subsetted$id
    new_url <- paste(url, id, endpoint, sep = "/")
    id_info_specific <- httr::GET(new_url)
    parsed_specific <- fromJSON(rawToChar(id_info_specific$content))
    info_specific <- tibble::as_tibble(parsed_specific)
    return(info_specific)
    }
  else{
    return(all_shows)
  }
  }

show_data <- search_show(url = "https://api.tvmaze.com/shows")
cast <- search_show(show_name = "Breaking Bad", endpoint = "seasons")
BreakingBad <- search_show(show_name = "Breaking Bad")
View(show_data)
```

Contingency Tables:

```{r}
CT <- table(show_data$type, show_data$network$country$name, show_data$schedule$days)
```

### Practice with ggplots and analyzing the data.

– You should create some contingency tables

```         
 type(scripted reality) and day shown and country name
 rating range and runtime / type

 
```

– You should create numerical summaries for some quantitative variables at each setting of some of your categorical variables

```         
  average show rating based on genre specified
```
```{r}
avg_genre_rating <- function(genre_vector, data = show_data){
filtered <- data |>
    unnest_wider(rating, names_sep = "_") |>
    select(name,genres,rating_average) |>
    filter(map_lgl(genres, ~ all(genre_vector %in% .x)))
average <- mean(filtered$rating_average)
return(list("data" = filtered, "average" = average))
}
```

```{r}
test <- avg_genre_rating(genre_vector = c("Crime","Action"))
View(test$data)
```

```{r}
library(purrr)
data_test <- show_data |>
    unnest_wider(rating, names_sep = "_") |>
    select(name,genres,rating_average) |>
    filter(map_lgl(genres, ~ all(c("Drama", "Crime") %in% .x)))
average <- mean(data_test$rating_average)
average
```



Trying to extract all unique values of genre:
```{r}
unlisted <- unlist(show_data$genres)
all_genres <- sort(unique(unlisted))
```

– You should create at least four plots utilizing coloring, grouping, etc. All plots should have nice labels and titles.

```         
average show rating based on premiered year - grouped and colored by type
```
```{r}
  data <- show_data |>
    unnest_wider(rating, names_sep = "_") |>
    mutate(year = substr(premiered,1,4))
  
ggplot(data, aes(x = year, y = rating_average, color = type, group = type)) +
  geom_point() 

```


episode trend rating faceted by season
```{r}
library(tidyverse)
BBepisodes <- search_show(show_name = "House", endpoint = "episodes")
episode_ratings <- BBepisodes |>
      unnest_wider(rating, names_sep = "_") |>
      mutate(season = as.factor(season))
ggplot(episode_ratings, aes(x = season, y = rating_average)) +
  geom_point() 
```

```{r}
library(see)
library(ggplot2)

ggplot(episode_ratings, aes(x = season, y = rating_average, 
                            group = season,
                            fill = season)) +
  geom_violindot(fill_dots = "black") +
  scale_fill_material_d()+
  xlab ("Season Number") +
  ylab ("Average Episode Rating") +
  labs(title = "Episode Rating Distribution by Season")

  

  

```


genre count for shows (after viewing it may not work, too many distinct genre combinations)



```{r}
show_data %>%
  distinct(name, .keep_all=TRUE) %>%
  ggplot(aes(x=genres)) +
    geom_bar() +
    geom_text(stat='count', aes(label=after_stat(count)), vjust=-1) +
    scale_x_upset(n_intersections = 20, scale_name = NULL) +
    scale_y_continuous(breaks = NULL, lim = c(0, 100), name = "")
```
```{r}
View(tidy_movies)
```


```{r}
tidy_movies %>%
  distinct(title, year, length, .keep_all=TRUE) %>%
  ggplot(aes(x=Genres)) +
    geom_bar() +
    geom_text(stat='count', aes(label=after_stat(count)), vjust=-1) +
    scale_x_upset(n_intersections = 20, scale_name = NULL) +
    scale_y_continuous(breaks = NULL, lim = c(0, 1350), name = "")
```




** special plot **
half violin - half dot plot = vertical distribution for age and 
grouped by gender of cast of a show
```

∗ At least one plot that you create should be a plot that we didn’t cover in class (say a heatmap or something like that - depends on your data - lots of good examples to consider here https://exts.ggplot2.tidyverse.org/gallery/)

A Data Exploration tab. The tab should – Allow the user to choose variables/combinations of variables that are summarized via numerical and graphical summaries 2 ∗ The user should be able to change the type of plot shown and type of summary reported (this may correspond to different types of data that are downloaded) ∗ The user should be able to do some kind of faceting on a plot

for all show data I can do: pick your x
